"""Convienence functions for working with web app data models.

Utilities for parsing and converting web app data records between different
data representations.

(c) 2023 Regents of University of California / The Eric and Wendy Schmidt Center
for Data Science and the Environment at UC Berkeley.

This file is part of afscgap released under the BSD 3-Clause License. See
LICENSE.md.
"""
import typing

import geolib.geohash  # type: ignore

import model


def parse_record(target: typing.Tuple) -> model.SimplifiedRecord:
    """Parse a record from a row returned from query.sql.

    Args:
        target: The tuple to parse as returned from the database result as
            generated by afscgapviz/sql/query.sql.

    Returns:
        Record parsed from the database result.
    """
    year = int(target[0])
    survey = str(target[1])
    species = str(target[2])
    common_name = str(target[3])
    geohash = str(target[4])
    surface_temperature = float(target[5])
    bottom_temperature = float(target[6])
    weight = float(target[7])
    count = float(target[8])
    area_swept = float(target[9])
    num_records_aggregated = int(target[10])

    return model.SimplifiedRecord(
        year,
        survey,
        species,
        common_name,
        geohash,
        surface_temperature,
        bottom_temperature,
        weight,
        count,
        area_swept,
        num_records_aggregated
    )


def record_to_dict(target: model.SimplifiedRecord) -> typing.Dict:
    """Convert a simplified record to a dictionary form.

    Args:
        target: The record to be returned as a dictionary.

    Returns:
        Record as a dictionary.
    """
    bounds = geolib.geohash.bounds(target.get_geohash())
    return {
        'year': target.get_year(),
        'survey': target.get_survey(),
        'species': target.get_species(),
        'commonName': target.get_common_name(),
        'geohash': target.get_geohash(),
        'surfaceTemperatureC': target.get_surface_temperature(),
        'bottomTemperatureC': target.get_bottom_temperature(),
        'weightKg': target.get_weight(),
        'count': target.get_count(),
        'areaSweptHectares': target.get_area_swept(),
        'numRecordsAggregated': target.get_num_records_aggregated(),
        'latLowDegrees': bounds[0][0],
        'lngLowDegrees': bounds[0][1],
        'latHighDegrees': bounds[1][0],
        'lngHighDegrees': bounds[1][1]
    }
